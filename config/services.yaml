# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    machine_name_prefix: '%env(MACHINE_NAME_PREFIX)%'
    digitalocean_droplet_region: '%env(DIGITALOCEAN_REGION)%'
    digitalocean_droplet_size: '%env(DIGITALOCEAN_SIZE)%'
    worker_image: '%env(WORKER_IMAGE)%'
    digitalocean_droplet_tag: '%env(DIGITALOCEAN_TAG)%'
    machine_is_active_dispatch_delay: '%env(int:MACHINE_IS_ACTIVE_DISPATCH_DELAY)%'
    version: '%env(VERSION)%'
    users_security_bundle_base_url: '%env(AUTHENTICATION_BASE_URL)%'
    users_security_bundle_public_pattern: '(^/$)|(^/health-check$)'
    users_security_bundle_secured_pattern: '^/machine/'
    users_security_bundle_access_control_path: '^/'
    health_check_bundle_enable_status_readiness_inspector: true
    health_check_bundle_status_is_ready: '%env(bool:IS_READY)%'
    health_check_bundle_enable_status_version_inspector: true
    health_check_bundle_status_version: '%env(VERSION)%'
    health_check_bundle_status_path: '/'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $messengerAuditLogger: '@monolog.logger.messenger_audit'
            $healthCheckLogger: '@monolog.logger.health_check'

    _instanceof:
        App\Services\ExceptionFactory\MachineProvider\ExceptionFactoryInterface:
            tags: ['app.machine_provider.exception_factory']

        App\Services\ExceptionIdentifier\ExceptionIdentifierInterface:
            tags: ['app.exception.identifier']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Message/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    GuzzleHttp\Psr7\HttpFactory: ~

    Psr\Http\Message\RequestFactoryInterface:
        alias: GuzzleHttp\Psr7\HttpFactory

    Psr\Http\Message\StreamFactoryInterface:
        alias: GuzzleHttp\Psr7\HttpFactory

    GuzzleHttp\HandlerStack:
        class: GuzzleHttp\HandlerStack
        factory: ['GuzzleHttp\HandlerStack', 'create']

    Psr\Http\Client\ClientInterface:
        class: GuzzleHttp\Client
        arguments:
            $config:
                handler: '@GuzzleHttp\HandlerStack'

    App\Services\MachineNameFactory:
        arguments:
            $environmentPrefix: '%machine_name_prefix%'

    App\Services\ExceptionFactory\MachineProvider\ExceptionFactory:
        arguments:
            $factories: !tagged_iterator 'app.machine_provider.exception_factory'

    App\Services\ServiceStatusInspector\MessageQueueInspector:
        tags:
            - { name: 'health_check_bundle.component_inspector.health_check' }

    App\Services\ServiceStatusInspector\DigitalOceanMachineProviderInspector:
        tags:
            - { name: 'health_check_bundle.component_inspector.health_check' }

    SmartAssert\DigitalOceanDropletConfiguration\Factory:
        arguments:
            $defaults:
                region: '%digitalocean_droplet_region%'
                size: '%digitalocean_droplet_size%'
                image: '%worker_image%'
                tags:
                    - '%digitalocean_droplet_tag%'

    App\Services\RequestIdFactoryInterface:
        class: App\Services\RequestIdFactory

    App\Services\MachineRequestDispatcher:
        arguments:
            $dispatchDelays:
                'App\Message\CheckMachineIsActive': '%machine_is_active_dispatch_delay%'

    App\Services\MachineManager\MachineManager:
        arguments:
            $providerMachineManagers:
                - '@App\Services\MachineManager\DigitalOcean\MachineManager'

    DigitalOceanV2\HttpClient\Builder:
        arguments:
            $httpClient: '@Psr\Http\Client\ClientInterface'

    app.services.machine_manager.digitalocean.client.primary:
        class: DigitalOceanV2\Client
        calls:
            - authenticate: ['%env(string:PRIMARY_DIGITALOCEAN_API_TOKEN)%']
        tags:
            - { name: 'app.services.machine_manager.digitalocean.client' }

    app.services.machine_manager.digitalocean.client.secondary:
        class: DigitalOceanV2\Client
        calls:
            - authenticate: ['%env(string:SECONDARY_DIGITALOCEAN_API_TOKEN)%']
        tags:
            - { name: 'app.services.machine_manager.digitalocean.client' }

    App\Services\MachineManager\DigitalOcean\ClientPool:
        arguments:
            $clients:
                - '@app.services.machine_manager.digitalocean.client.primary'
                - '@app.services.machine_manager.digitalocean.client.secondary'

    App\Services\ExceptionIdentifier\ExceptionIdentifier:
        arguments:
            $identifiers: !tagged_iterator 'app.exception.identifier'
